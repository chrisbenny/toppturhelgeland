"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/menus/default-style"));

var _reactInk = _interopRequireDefault(require("react-ink"));

var _reactClickOutside = _interopRequireDefault(require("react-click-outside"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DefaultMenu extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "lastWindowHeight", 0);

    _defineProperty(this, "scrollOffset", 0);

    _defineProperty(this, "handleClickOutside", event => {
      if (this.props.isOpen) {
        this.props.onClickOutside(event);
      }
    });

    _defineProperty(this, "handleKeyDown", event => {
      const items = this.props.items;
      const selectedItem = this.state.selectedItem;
      const currentIndex = items.indexOf(selectedItem) || 0;
      const isOpen = this.props.isOpen || this.props.opened; // eslint-disable-line

      if (event.key == 'Escape' && isOpen) {
        this.props.onClose();
      }

      if (event.key == 'ArrowDown' && isOpen && currentIndex < items.length - 1) {
        this.setState({
          focusedItem: this.props.items[currentIndex + 1]
        });
      }

      if (event.key == 'ArrowUp' && isOpen && currentIndex > 0) {
        this.setState({
          focusedItem: this.props.items[currentIndex - 1]
        });
      }

      if (event.key == 'Enter' && isOpen && this.state.selectedItem) {
        this.props.onAction(this.props.items[currentIndex]);
      }
    });

    _defineProperty(this, "handleItemClick", event => {
      const actionId = event.currentTarget.getAttribute('data-action-id');
      this.props.onAction(this.props.items[actionId]);
    });

    _defineProperty(this, "handleFocus", event => {
      const index = event.target.getAttribute('data-action-id');
      this.setState({
        focusedItem: this.props.items[index]
      });
    });

    _defineProperty(this, "handleKeyPress", event => {
      const index = event.target.getAttribute('data-action-id');

      if (event.key === 'Enter') {
        this.props.onAction(this.props.items[index]);
      }
    });

    _defineProperty(this, "setRootElement", element => {
      this._rootElement = element;
    });

    this.state = {
      focusedItem: null
    };
  }

  componentDidMount() {
    window.addEventListener('keydown', this.handleKeyDown, false);
    window.addEventListener('resize', this.handleResize, false);
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize, false);
    window.removeEventListener('keydown', this.handleKeyDown, false);
  }

  render() {
    const focusedItem = this.state.focusedItem;
    const _this$props = this.props,
          items = _this$props.items,
          ripple = _this$props.ripple,
          className = _this$props.className,
          opened = _this$props.opened;
    const isOpen = opened || this.props.isOpen;
    return _react.default.createElement("div", {
      ref: this.setRootElement,
      className: `${isOpen ? _defaultStyle.default.isOpen : _defaultStyle.default.closed} ${className || ''}`
    }, _react.default.createElement("ul", {
      className: _defaultStyle.default.list
    }, items.map((item, i) => {
      const Icon = item.icon;
      return _react.default.createElement("li", {
        key: i,
        className: (0, _classnames.default)([item === focusedItem ? _defaultStyle.default.focusedItem : _defaultStyle.default.item, item.isDisabled && _defaultStyle.default.isDisabled, item.divider && _defaultStyle.default.divider])
      }, _react.default.createElement("a", {
        onClick: item.isDisabled ? null : this.handleItemClick,
        "data-action-id": i,
        className: item.danger ? _defaultStyle.default.dangerLink : _defaultStyle.default.link,
        onFocus: this.handleFocus,
        tabIndex: "0",
        onKeyPress: this.handleKeyPress
      }, Icon && _react.default.createElement("span", {
        className: _defaultStyle.default.iconContainer
      }, _react.default.createElement(Icon, {
        className: _defaultStyle.default.icon
      })), item.title, ripple && !item.isDisabled && _react.default.createElement(_reactInk.default, {
        duration: 200,
        opacity: 0.1,
        radius: 200
      })));
    })));
  }

}

_defineProperty(DefaultMenu, "propTypes", {
  onAction: _propTypes.default.func.isRequired,
  isOpen: _propTypes.default.bool,
  ripple: _propTypes.default.bool,
  className: _propTypes.default.string,
  onClickOutside: _propTypes.default.func,
  onClose: _propTypes.default.func,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.node.isRequired,
    icon: _propTypes.default.func
  }))
});

_defineProperty(DefaultMenu, "defaultProps", {
  menuOpened: false,
  isOpen: false,
  fullWidth: false,
  icon: false,
  ripple: true,

  onClickOutside() {},

  onClose() {}

});

var _default = (0, _reactClickOutside.default)(DefaultMenu);

exports.default = _default;