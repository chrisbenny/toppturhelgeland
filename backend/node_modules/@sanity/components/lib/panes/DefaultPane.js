"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _DefaultPane = _interopRequireDefault(require("./styles/DefaultPane.css"));

var _moreVertIcon = _interopRequireDefault(require("part:@sanity/base/more-vert-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _Styleable = _interopRequireDefault(require("../utilities/Styleable"));

var _scrollContainer = _interopRequireDefault(require("part:@sanity/components/utilities/scroll-container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Pane extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      headerStyle: {
        opacity: 0,
        boxShadow: 'none'
      }
    });

    _defineProperty(this, "handleMenuToggle", event => {
      if (this.props.isCollapsed) {
        this.props.onExpand(event);
      } else {
        this.props.onMenuToggle(event);
      }
    });

    _defineProperty(this, "handleToggle", event => {
      if (this.props.isCollapsed) {
        this.props.onExpand(this);
      } else {
        this.props.onCollapse(this);
      }
    });

    _defineProperty(this, "setScrollShadow", scrollTop => {
      const threshold = 100;

      if (scrollTop < threshold) {
        const ratio = scrollTop / threshold;
        this.setState({
          headerStyle: {
            opacity: ratio + 0.5,
            boxShadow: `0 2px ${3 * ratio}px rgba(0, 0, 0, ${ratio * 0.3})`
          }
        });
      } else {
        this.setState({
          headerStyle: {
            opacity: 1,
            boxShadow: '0 2px 3px rgba(0, 0, 0, 0.3)'
          }
        });
      }

      if (scrollTop < 0) {
        this.setState({
          headerStyle: {
            boxShadow: 'none'
          }
        });
      }
    });

    _defineProperty(this, "handleContentScroll", event => {
      this.setScrollShadow(event.target.scrollTop);
    });
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.scrollTop !== this.props.scrollTop) {
      this.setScrollShadow(nextProps.scrollTop);
    }
  }

  render() {
    const _this$props = this.props,
          title = _this$props.title,
          children = _this$props.children,
          isSelected = _this$props.isSelected,
          renderFunctions = _this$props.renderFunctions,
          renderMenu = _this$props.renderMenu,
          isCollapsed = _this$props.isCollapsed,
          styles = _this$props.styles;
    return _react.default.createElement("div", {
      className: `
          ${isCollapsed ? styles.isCollapsed : styles.root}
          ${isSelected ? styles.isActive : styles.isDisabled}
        `,
      ref: this.setRootElement
    }, _react.default.createElement("div", {
      className: styles.header,
      style: {
        boxShadow: isCollapsed ? '' : this.state.headerStyle.boxShadow
      }
    }, _react.default.createElement("div", {
      className: styles.headerContent
    }, _react.default.createElement("h2", {
      className: styles.title,
      onClick: this.handleToggle
    }, title), renderFunctions(isCollapsed)), _react.default.createElement("div", {
      className: styles.menuWrapper
    }, _react.default.createElement("div", {
      className: styles.menuButtonContainer
    }, renderMenu(isCollapsed) && _react.default.createElement(_default2.default, {
      kind: "simple",
      icon: _moreVertIcon.default,
      onClick: this.handleMenuToggle,
      className: styles.menuButton
    })), _react.default.createElement("div", {
      className: styles.menuContainer
    }, renderMenu(isCollapsed))), _react.default.createElement("div", {
      className: styles.headerBackground,
      style: {
        opacity: isCollapsed ? '' : this.state.headerStyle.opacity
      }
    })), _react.default.createElement("div", {
      className: styles.main
    }, _react.default.createElement(_scrollContainer.default, {
      className: styles.scrollContainer,
      onScroll: this.handleContentScroll
    }, children)));
  }

}

_defineProperty(Pane, "propTypes", {
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  isCollapsed: _propTypes.default.bool,
  onExpand: _propTypes.default.func,
  onCollapse: _propTypes.default.func,
  minWidth: _propTypes.default.number,
  width: _propTypes.default.number,
  renderMenu: _propTypes.default.func,
  renderFunctions: _propTypes.default.func,
  children: _propTypes.default.node,
  isSelected: _propTypes.default.bool,
  onMenuToggle: _propTypes.default.func,
  className: _propTypes.default.string,
  styles: _propTypes.default.object,
  scrollTop: _propTypes.default.number
});

_defineProperty(Pane, "defaultProps", {
  title: 'Untitled',
  isCollapsed: false,
  className: '',
  isScrollable: true,
  minWidth: 0,
  width: 0,
  styles: {},
  children: _react.default.createElement("div", null),

  onCollapse() {},

  onExpand() {},

  renderMenu() {
    return false;
  },

  renderFunctions() {},

  isActive: false,
  updateId: 0,
  scrollTop: undefined,

  onMenuToggle() {
    return true;
  }

});

var _default = (0, _Styleable.default)(Pane, _DefaultPane.default);

exports.default = _default;