"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _uniqBy2 = _interopRequireDefault(require("lodash/uniqBy"));

var _partition4 = _interopRequireDefault(require("lodash/partition"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _router = require("part:@sanity/base/router");

var _sortIcon = _interopRequireDefault(require("part:@sanity/base/sort-icon"));

var _reactInk = _interopRequireDefault(require("react-ink"));

var _visibilityOffIcon = _interopRequireDefault(require("part:@sanity/base/visibility-off-icon"));

var _editIcon = _interopRequireDefault(require("part:@sanity/base/edit-icon"));

var _queryContainer = _interopRequireDefault(require("part:@sanity/base/query-container"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _preview = _interopRequireDefault(require("part:@sanity/base/preview"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/panes/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

var _reactTippy = require("@sanity/react-tippy");

var _draftUtils = require("part:@sanity/base/util/draft-utils");

var _DocumentsPaneMenu = _interopRequireDefault(require("./DocumentsPaneMenu"));

var _ListView = _interopRequireDefault(require("./ListView"));

var _DocumentsPane = _interopRequireDefault(require("./styles/DocumentsPane.css"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const NOOP = () => {}; // eslint-disable-line


const LOCALSTORAGE_KEY = 'desk-tool.documents-pane-settings';

function readSettings() {
  return JSON.parse(window.localStorage.getItem(LOCALSTORAGE_KEY) || '{}');
}

function writeSettings(settings) {
  window.localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(settings));
}

function getDocumentKey(document) {
  return (0, _draftUtils.getPublishedId)(document._id);
}

function toGradientOrderClause(orderBy) {
  return orderBy.map(ordering => [ordering.field, ordering.direction].filter(Boolean).join(' ')).join(', ');
}

const IMPLICIT_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']; // Takes a path array and a schema type and builds a GROQ join every time it enters a reference field

function joinReferences(schemaType, path) {
  const _path = _toArray(path),
        head = _path[0],
        tail = _path.slice(1);

  const schemaField = schemaType.fields.find(field => field.name === head);

  if (!schemaField) {
    if (!IMPLICIT_FIELDS.includes(head)) {
      // eslint-disable-next-line no-console
      console.warn('The current ordering config targeted the nonexistent field "%s" on schema type "%s". It should be one of %o', head, schemaType.name, schemaType.fields.map(field => field.name));
    }

    return '';
  }

  if (schemaField.type.name === 'reference') {
    const refTypes = schemaField.type.to;
    return `${head}->{${refTypes.map(refType => joinReferences(refType, tail)).join(',')}}`;
  }

  return tail.length > 0 ? `${head}{${joinReferences(schemaField.type, tail)}}` : head;
}

function selectWithJoins(schemaType, orderBy) {
  return orderBy.map(ordering => joinReferences(schemaType, ordering.field.split('.')));
}

const ORDER_BY_UPDATED_AT = {
  title: 'Last edited',
  name: 'updatedAt',
  by: [{
    field: '_updatedAt',
    direction: 'desc'
  }]
};
const ORDER_BY_CREATED_AT = {
  title: 'Created',
  name: 'createdAt',
  by: [{
    field: '_createdAt',
    direction: 'desc'
  }]
};
const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT;
const DEFAULT_ORDERING_OPTIONS = [ORDER_BY_UPDATED_AT, ORDER_BY_CREATED_AT];

function removePublishedWithDrafts(documents) {
  const _partition2 = (0, _partition4.default)(documents.map(doc => doc._id), _draftUtils.isDraftId),
        _partition3 = _slicedToArray(_partition2, 2),
        draftIds = _partition3[0],
        publishedIds = _partition3[1];

  return documents.map(doc => {
    const publishedId = (0, _draftUtils.getPublishedId)(doc._id);
    const draftId = (0, _draftUtils.getDraftId)(doc._id);
    return _objectSpread({}, doc, {
      hasPublished: publishedIds.includes(publishedId),
      hasDraft: draftIds.includes(draftId)
    });
  }).filter(doc => !((0, _draftUtils.isPublishedId)(doc._id) && doc.hasDraft));
}

function writeSettingsForType(type, settings) {
  writeSettings(Object.assign(readSettings(), {
    [type]: settings
  }));
}

var _default = (0, _router.withRouterHOC)((_temp = _class = class DocumentsPane extends _react.default.PureComponent {
  constructor(props) {
    super();

    _defineProperty(this, "handleSetListLayout", listLayout => {
      this.setState(prevState => ({
        settings: _objectSpread({}, prevState.settings, {
          listLayout: listLayout.key
        })
      }), this.writeSettings);
    });

    _defineProperty(this, "handleSetOrdering", ordering => {
      this.setState(prevState => ({
        settings: _objectSpread({}, prevState.settings, {
          ordering: ordering.name
        })
      }), this.writeSettings);
    });

    _defineProperty(this, "handleToggleMenu", evt => {
      if (evt) {
        evt.stopPropagation();
      }

      this.setState(prevState => ({
        menuIsOpen: !prevState.menuIsOpen
      }));
    });

    _defineProperty(this, "handleCloseMenu", evt => {
      if (evt) {
        evt.stopPropagation();
      }

      this.setState(prevState => ({
        menuIsOpen: !prevState.menuIsOpen
      }));
    });

    _defineProperty(this, "handleGoToCreateNew", () => {
      const _this$props = this.props,
            selectedType = _this$props.selectedType,
            router = _this$props.router;
      router.navigateIntent('create', {
        type: selectedType
      });
    });

    _defineProperty(this, "renderDocumentsPaneMenu", () => {
      const selectedType = this.props.selectedType;

      const type = _schema.default.get(selectedType);

      return _react.default.createElement(_DocumentsPaneMenu.default, {
        onSetListLayout: this.handleSetListLayout,
        onSetOrdering: this.handleSetOrdering,
        onGoToCreateNew: this.handleGoToCreateNew,
        onMenuClose: this.handleCloseMenu,
        onClickOutside: this.handleCloseMenu,
        isOpen: this.state.menuIsOpen,
        orderingOptions: this.getOrderingOptions(selectedType),
        type: type
      });
    });

    _defineProperty(this, "renderStatus", item => {
      const isLiveEditEnabled = this.isLiveEditEnabled();
      return _react.default.createElement("div", {
        className: _DocumentsPane.default.itemStatus
      }, !item.hasPublished && _react.default.createElement(_reactTippy.Tooltip, {
        title: "Not published",
        arrow: true,
        theme: "light",
        distance: "2",
        sticky: true,
        size: "small"
      }, _react.default.createElement("i", null, _react.default.createElement(_visibilityOffIcon.default, null))), !isLiveEditEnabled && item.hasDraft && item.hasPublished && _react.default.createElement(_reactTippy.Tooltip, {
        title: "Has changes not yet published",
        arrow: true,
        theme: "light",
        distance: "2",
        sticky: true,
        size: "small"
      }, _react.default.createElement("i", null, _react.default.createElement(_editIcon.default, null))));
    });

    _defineProperty(this, "renderDocumentPaneItem", (item, index, options = {}) => {
      const _this$props2 = this.props,
            selectedType = _this$props2.selectedType,
            selectedDocumentId = _this$props2.selectedDocumentId;
      const settings = this.state.settings;
      const ordering = this.getOrderingOptions(selectedType).find(option => option.name === settings.ordering);

      const type = _schema.default.get(selectedType);

      const linkState = {
        selectedDocumentId: (0, _draftUtils.getPublishedId)(item._id),
        selectedType: type.name,
        action: 'edit'
      };
      const isSelected = selectedDocumentId && (0, _draftUtils.getPublishedId)(item._id) === (0, _draftUtils.getPublishedId)(selectedDocumentId);
      return _react.default.createElement(_router.StateLink, {
        state: linkState,
        className: _DocumentsPane.default.link,
        tabIndex: 0
      }, _react.default.createElement("div", {
        className: isSelected ? _DocumentsPane.default.selectedItem : _DocumentsPane.default.item
      }, _react.default.createElement(_preview.default, {
        value: item,
        ordering: ordering,
        layout: settings.listLayout,
        type: type,
        status: () => this.renderStatus(item)
      })), _react.default.createElement(_reactInk.default, {
        duration: 1000,
        opacity: 0.1,
        radius: 200
      }));
    });

    _defineProperty(this, "renderFunctions", isCollapsed => {
      const selectedType = this.props.selectedType;

      const type = _schema.default.get(selectedType);

      return _react.default.createElement(_default3.default, {
        title: `Create new ${type.name}`,
        icon: _plusIcon.default,
        color: "primary",
        kind: "simple",
        onClick: this.handleGoToCreateNew
      });
    });

    _defineProperty(this, "handleScroll", scrollTop => {
      this.setState({
        scrollTop
      });
    });

    const _settings = readSettings();

    this.state = {
      settings: _settings && _settings[props.selectedType] || {
        listLayout: 'default',
        ordering: DEFAULT_SELECTED_ORDERING_OPTION
      },
      menuIsOpen: false
    };
  }

  writeSettings() {
    writeSettingsForType(this.props.selectedType, this.state.settings);
  }

  isLiveEditEnabled() {
    const selectedSchemaType = _schema.default.get(this.props.selectedType);

    return selectedSchemaType.liveEdit === true;
  }

  getOrderingOptions(selectedType) {
    const type = _schema.default.get(selectedType);

    const optionsWithDefaults = type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS;
    return (0, _uniqBy2.default)(optionsWithDefaults, 'name').map(option => {
      return _objectSpread({}, option, {
        icon: option.icon || _sortIcon.default,
        title: _react.default.createElement("span", null, "Sort by ", _react.default.createElement("b", null, option.title))
      });
    });
  }

  render() {
    const _this$props3 = this.props,
          selectedDocumentId = _this$props3.selectedDocumentId,
          schemaType = _this$props3.schemaType,
          isCollapsed = _this$props3.isCollapsed,
          router = _this$props3.router;
    const settings = this.state.settings;
    const currentOrderingOption = this.getOrderingOptions(schemaType.name).find(option => option.name === settings.ordering) || DEFAULT_SELECTED_ORDERING_OPTION;
    const params = {
      type: schemaType.name,
      draftsPath: `${_draftUtils.DRAFTS_FOLDER}.**`
    };
    const query = `*[_type == $type] [0...10000] {_id, _type, ${selectWithJoins(schemaType, currentOrderingOption.by)}} | order(${toGradientOrderClause(currentOrderingOption.by)}){_id, _type}`;
    const _router$state = router.state,
          selectedType = _router$state.selectedType,
          action = _router$state.action;
    const isSelected = selectedType && !action && !selectedDocumentId;
    return _react.default.createElement(_default2.default, _extends({}, this.props, {
      renderMenu: this.renderDocumentsPaneMenu,
      renderFunctions: this.renderFunctions,
      defaultWidth: 200,
      isCollapsed: isCollapsed,
      onMenuToggle: this.handleToggleMenu,
      scrollTop: this.state.scrollTop,
      isSelected: isSelected
    }), _react.default.createElement(_queryContainer.default, {
      query: query,
      params: params,
      type: schemaType,
      selectedId: selectedDocumentId,
      settings: settings
    }, ({
      result,
      loading,
      error,
      onRetry,
      type
    }) => {
      if (error) {
        return _react.default.createElement(_default4.default, {
          kind: "danger",
          action: {
            title: 'Retry'
          },
          onAction: onRetry
        }, _react.default.createElement("div", null, "An error occurred while loading items:"), _react.default.createElement("div", null, error.message));
      }

      const items = removePublishedWithDrafts(result ? result.documents : []);

      if (!loading && (!items || items.length === 0)) {
        return _react.default.createElement("div", {
          className: _DocumentsPane.default.empty
        }, _react.default.createElement("div", null, _react.default.createElement("h3", null, "There are no documents of type ", _react.default.createElement("strong", null, type.title), " yet."), (0, _get2.default)(this.props, 'router.state.action') !== 'edit' && _react.default.createElement(_default3.default, {
          color: "primary",
          icon: _plusIcon.default,
          onClick: this.handleGoToCreateNew
        }, "New ", type.title)));
      }

      return _react.default.createElement("div", {
        className: _DocumentsPane.default[`layout__${settings.listLayout}`]
      }, loading && _react.default.createElement(_spinner.default, {
        center: true,
        message: "Loading items\u2026"
      }), items && _react.default.createElement(_ListView.default, {
        onScroll: this.handleScroll,
        items: items,
        getItemKey: getDocumentKey,
        renderItem: this.renderDocumentPaneItem,
        listLayout: settings.listLayout
      }));
    }));
  }

}, _defineProperty(_class, "propTypes", {
  loading: _propTypes.default.bool,
  selectedType: _propTypes.default.string,
  selectedDocumentId: _propTypes.default.string,
  schemaType: _propTypes.default.object,
  isCollapsed: _propTypes.default.bool,
  published: _propTypes.default.array,
  drafts: _propTypes.default.array,
  onSetListLayout: _propTypes.default.any,
  router: _propTypes.default.object
}), _defineProperty(_class, "defaultProps", {
  loading: false,
  isCollapsed: false,
  published: [],
  drafts: [],
  onSetListLayout: NOOP
}), _temp));

exports.default = _default;