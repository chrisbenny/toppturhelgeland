"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _DeskTool = _interopRequireDefault(require("./styles/DeskTool.css"));

var _SchemaPaneResolver = _interopRequireDefault(require("./SchemaPaneResolver"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _router = require("part:@sanity/base/router");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _class, _temp;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = (0, _router.withRouterHOC)((_temp = _class = class DeskTool extends _react.default.Component {
  componentWillReceiveProps(nextProps) {
    this.checkRedirect(nextProps);
  }

  componentDidMount() {
    this.checkRedirect(this.props);
  }

  checkRedirect(props) {
    const router = props.router;
    const _router$state = router.state,
          selectedType = _router$state.selectedType,
          selectedDocumentId = _router$state.selectedDocumentId;

    if (selectedType === '*' && selectedDocumentId && selectedType) {
      this.checkType(selectedDocumentId, selectedType);
    }
  }

  checkType(documentId, expectedType) {
    if (this._checkTypeSubscription) {
      this._checkTypeSubscription.unsubscribe();
    }

    this._checkTypeSubscription = _client.default.observable.fetch(`*[_id == "${documentId}" || _id == "drafts.${documentId}"][0]._type`).subscribe(actualType => {
      if (actualType && actualType !== expectedType) {
        const router = this.props.router;
        router.navigate(_objectSpread({}, router.state, {
          selectedType: actualType
        }), {
          replace: true
        });
      }
    });
  }

  render() {
    const router = this.props.router;
    return _react.default.createElement("div", {
      className: _DeskTool.default.deskTool
    }, _react.default.createElement(_SchemaPaneResolver.default, {
      router: router
    }));
  }

}, _defineProperty(_class, "propTypes", {
  router: _propTypes.default.shape({
    state: _propTypes.default.object
  }).isRequired
}), _temp));

exports.default = _default;