"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _grid = require("part:@sanity/components/lists/grid");

var _InfiniteList = _interopRequireDefault(require("./InfiniteList"));

var _ListView = _interopRequireDefault(require("./styles/ListView.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ListView extends _react.default.PureComponent {
  render() {
    const _this$props = this.props,
          renderItem = _this$props.renderItem,
          items = _this$props.items,
          selectedItem = _this$props.selectedItem,
          listLayout = _this$props.listLayout,
          getItemKey = _this$props.getItemKey;

    switch (listLayout) {
      case 'card':
        {
          // todo: this part is disabled and deliberately *not* adjusted after lists refactoring
          return _react.default.createElement(_grid.List, {
            className: _ListView.default.cardList
          }, items.map(item => {
            // const isSelected = selectedItem === item /* todo: use to decorate with selected class etc. */
            return _react.default.createElement(_grid.Item, {
              key: getItemKey(item),
              className: _ListView.default.cardListItem
            }, renderItem(item));
          }));
        }

      case 'media':
        {
          // todo: this part is disabled and deliberately *not* adjusted after lists refactoring
          return _react.default.createElement(_grid.List, {
            className: _ListView.default.mediaList
          }, items.map(item => {
            // const isSelected = selectedItem === item /* todo: use to decorate with selected class etc. */
            return _react.default.createElement(_grid.Item, {
              key: getItemKey(item),
              className: _ListView.default.mediaListItem
            }, renderItem(item));
          }));
        }

      default:
        {
          return _react.default.createElement(_InfiniteList.default, {
            className: _ListView.default.scroll,
            onScroll: this.props.onScroll,
            items: items,
            getItemKey: getItemKey,
            renderItem: renderItem,
            layout: listLayout,
            selectedItem: selectedItem
          });
        }
    }
  }

}

exports.default = ListView;

_defineProperty(ListView, "propTypes", {
  items: _propTypes.default.array,
  // eslint-disable-line react/forbid-prop-types
  renderItem: _propTypes.default.func,
  getItemKey: _propTypes.default.func,
  listLayout: _propTypes.default.oneOf(['default', 'detail', 'card', 'media']),
  selectedItem: _propTypes.default.object,
  onScroll: _propTypes.default.func
});

_defineProperty(ListView, "defaultProps", {
  listLayout: 'default',
  loading: false,
  items: [],
  selectedItem: null
});