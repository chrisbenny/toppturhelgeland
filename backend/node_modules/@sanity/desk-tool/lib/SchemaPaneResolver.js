"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _dataAspects = _interopRequireDefault(require("./utils/dataAspects"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _SchemaPaneResolver = _interopRequireDefault(require("./styles/SchemaPaneResolver.css"));

var _TypePane = _interopRequireDefault(require("./pane/TypePane"));

var _DocumentsPane = _interopRequireDefault(require("./pane/DocumentsPane"));

var _EditorWrapper = _interopRequireDefault(require("./pane/EditorWrapper"));

var _GetStarted = _interopRequireDefault(require("./GetStarted"));

var _splitController = _interopRequireDefault(require("part:@sanity/components/panes/split-controller"));

var _splitPaneWrapper = _interopRequireDefault(require("part:@sanity/components/panes/split-pane-wrapper"));

var _default = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const TYPE_ITEMS = _dataAspects.default.getInferredTypes().map(typeName => ({
  key: typeName,
  name: typeName,
  title: _dataAspects.default.getDisplayName(typeName)
}));

class SchemaPaneResolver extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      collapsedPanes: []
    });

    _defineProperty(this, "handleToggleDocumentsPaneMenu", () => {
      this.setState({
        documentPaneMenuIsOpen: !this.state.documentPaneMenuIsOpen
      });
    });

    _defineProperty(this, "handleCloseDocumentsPaneMenu", () => {
      this.setState({
        documentPaneMenuIsOpen: false
      });
    });

    _defineProperty(this, "handleShouldCollapse", pane => {
      const collapsedPanes = this.state.collapsedPanes;
      collapsedPanes.push(pane.props.paneId);
      this.setState({
        collapsedPanes: collapsedPanes
      });
    });

    _defineProperty(this, "handleShouldExpand", pane => {
      this.setState({
        collapsedPanes: this.state.collapsedPanes.filter(p => p !== pane.props.paneId) //eslint-disable-line id-length

      });
    });
  }

  componentWillReceiveProps(nextProps) {
    const nextType = nextProps.router.state && nextProps.router.state.selectedType;
    const currentType = this.props.router.state && this.props.router.state.selectedType;

    if (nextType !== currentType) {
      this.setState({
        collapsedPanes: []
      });
    }
  }

  render() {
    const router = this.props.router;
    const collapsedPanes = this.state.collapsedPanes;
    const _router$state = router.state,
          selectedType = _router$state.selectedType,
          selectedDocumentId = _router$state.selectedDocumentId,
          action = _router$state.action;

    const schemaType = _schema.default.get(router.state.selectedType);

    if (TYPE_ITEMS.length === 0) {
      return _react.default.createElement(_GetStarted.default, null);
    }

    return _react.default.createElement("div", {
      className: _SchemaPaneResolver.default.container
    }, _react.default.createElement(_splitController.default, {
      onSholdCollapse: this.handleShouldCollapse,
      onSholdExpand: this.handleShouldExpand
    }, _react.default.createElement(_splitPaneWrapper.default, {
      defaultWidth: 200,
      minWidth: 100,
      paneId: "typePane",
      isCollapsed: !!collapsedPanes.find(pane => pane === 'typePane')
    }, _react.default.createElement(_TypePane.default, {
      isCollapsed: !!collapsedPanes.find(pane => pane === 'typePane'),
      title: "Content",
      paneId: "typePane",
      items: TYPE_ITEMS,
      router: router,
      onExpand: this.handleShouldExpand,
      onCollapse: this.handleShouldCollapse
    })), schemaType && selectedType && _react.default.createElement(_splitPaneWrapper.default, {
      defaultWidth: 300,
      minWidth: 100,
      maxWidth: 400,
      paneId: "documentsPane",
      isCollapsed: !!collapsedPanes.find(pane => pane === 'documentsPane')
    }, _react.default.createElement(_DocumentsPane.default, {
      key: selectedType,
      isCollapsed: !!collapsedPanes.find(pane => pane === 'documentsPane'),
      selectedType: selectedType,
      title: _dataAspects.default.getDisplayName(selectedType) || 'Untitled',
      selectedDocumentId: selectedDocumentId,
      schemaType: schemaType,
      router: router,
      paneId: "documentsPane",
      onExpand: this.handleShouldExpand,
      onCollapse: this.handleShouldCollapse
    })), !schemaType && !selectedType && _react.default.createElement(_splitPaneWrapper.default, null, _react.default.createElement("div", {
      className: _SchemaPaneResolver.default.selectContentType
    }, "Select content type")), schemaType && selectedDocumentId && action === 'edit' && _react.default.createElement(_splitPaneWrapper.default, null, _react.default.createElement(_EditorWrapper.default, {
      key: selectedDocumentId,
      documentId: selectedDocumentId,
      typeName: schemaType.name,
      schemaType: schemaType
    })), selectedType && !schemaType && _react.default.createElement(_splitPaneWrapper.default, null, _react.default.createElement("h2", {
      className: _SchemaPaneResolver.default.emptyText
    }, "Could not find any type named", ' ', _react.default.createElement("strong", null, _react.default.createElement("em", null, selectedType)), ' ', "in schema", ' ', _react.default.createElement("strong", null, _react.default.createElement("em", null, _schema.default.name)), "\u2026"))), selectedType && schemaType && action && action !== 'edit' && // this would normally never happen
    _react.default.createElement(_default.default, {
      kind: "error"
    }, "Invalid action: ", action));
  }

}

exports.default = SchemaPaneResolver;

_defineProperty(SchemaPaneResolver, "propTypes", {
  router: _propTypes.default.shape({
    state: _propTypes.default.object
  }).isRequired
});