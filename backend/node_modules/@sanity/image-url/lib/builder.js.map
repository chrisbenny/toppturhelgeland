{"version":3,"sources":["../src/builder.js"],"names":["validFits","validCrops","ImageUrlBuilder","parent","options","source","withOptions","dataset","projectId","width","height","x","y","focalPoint","maxWidth","minWidth","maxHeight","minHeight","blur","sharpen","left","top","rect","format","invert","orientation","quality","download","flipHorizontal","flipVertical","ignoreImageParams","value","indexOf","Error","fit","crop","url","urlBuilder","clientConfig","baseUrl","apiHost","replace"],"mappings":"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","sourcesContent":["import urlForImage from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\n\nclass ImageUrlBuilder {\n  constructor(parent, options) {\n    if (parent) {\n      this.options = {...(parent.options || {}), ...(options || {})}\n    } else {\n      this.options = options || {}\n    }\n  }\n\n  withOptions(options) {\n    return new ImageUrlBuilder(this, options)\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify the width of the image in pixels\n  width(width) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x, y) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width, height) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left, top, width, height) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format) {\n    return this.withOptions({format})\n  }\n\n  invert(invert) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image verically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Synonym for url()\n  toString() {\n    return this.url()\n  }\n}\n\nexport default function urlBuilder(options) {\n  // Did we get a SanityClient?\n  if (options && typeof options.clientConfig === 'object') {\n    // Inherit config from client\n    return new ImageUrlBuilder(null, {\n      baseUrl: options.clientConfig.apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId: options.clientConfig.projectId,\n      dataset: options.clientConfig.dataset\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options)\n}\n"],"file":"builder.js"}