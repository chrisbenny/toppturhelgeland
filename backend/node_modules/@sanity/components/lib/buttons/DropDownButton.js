"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _omit3 = _interopRequireDefault(require("lodash/omit"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _dropdownStyle = _interopRequireDefault(require("part:@sanity/components/buttons/dropdown-style"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _angleDownIcon = _interopRequireDefault(require("part:@sanity/base/angle-down-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/menus/default"));

var _poppable = _interopRequireDefault(require("part:@sanity/components/utilities/poppable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DropDownButton extends _react.default.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      menuOpened: false
    });

    _defineProperty(this, "handleClose", () => {
      this.setState({
        menuOpened: false
      });
    });

    _defineProperty(this, "setMenuElement", element => {
      this._menuElement = element;
    });

    _defineProperty(this, "handleOnClick", event => {
      this.setState({
        menuOpened: true,
        width: event.target.offsetWidth
      });
    });

    _defineProperty(this, "handleClickOutside", event => {
      if (this._rootElement && this._rootElement.contains(event.target)) {
        // Stop the open button from being clicked
        event.stopPropagation();
        this.handleClose();
      } else {
        this.handleClose();
      }
    });

    _defineProperty(this, "handleAction", item => {
      this.props.onAction(item);
      this.handleClose();
    });
  }

  render() {
    const _omit2 = (0, _omit3.default)(this.props, 'onAction'),
          items = _omit2.items,
          children = _omit2.children,
          kind = _omit2.kind,
          className = _omit2.className,
          rest = _objectWithoutProperties(_omit2, ["items", "children", "kind", "className"]);

    const _this$state = this.state,
          menuOpened = _this$state.menuOpened,
          width = _this$state.width;
    const modifiers = {
      preventOverflow: 'viewport',
      customStyle: {
        enabled: true,
        fn: data => {
          data.styles = _objectSpread({}, data.styles, {
            minWidth: (0, _get2.default)(data, 'offsets.width' || 100)
          });
          return data;
        }
      }
    };

    const target = _react.default.createElement(_default.default, _extends({}, rest, {
      onClick: this.handleOnClick,
      kind: kind
    }), _react.default.createElement("span", {
      className: _dropdownStyle.default.title
    }, children), _react.default.createElement("span", {
      className: _dropdownStyle.default.arrow
    }, _react.default.createElement(_angleDownIcon.default, {
      color: "inherit"
    })));

    return _react.default.createElement("div", {
      className: `${_dropdownStyle.default.root} ${className}`
    }, _react.default.createElement(_poppable.default, {
      modifiers: modifiers,
      target: target,
      onEscape: this.handleClose,
      onClickOutside: this.handleClose
    }, menuOpened && _react.default.createElement("div", {
      className: _dropdownStyle.default.popper,
      style: {
        minWidth: `${width}px`
      }
    }, _react.default.createElement(_default2.default, {
      items: items,
      isOpen: true,
      className: _dropdownStyle.default.menu,
      onAction: this.handleAction,
      onClickOutside: this.handleClickOutside
    }))));
  }

}

exports.default = DropDownButton;

_defineProperty(DropDownButton, "propTypes", {
  kind: _propTypes.default.oneOf(['secondary', 'add', 'delete', 'warning', 'success', 'danger', 'simple']),
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    title: _propTypes.default.string.isRequired,
    icon: _propTypes.default.func
  })),
  onAction: _propTypes.default.func.isRequired,
  children: _propTypes.default.node.isRequired,
  inverted: _propTypes.default.bool,
  icon: _propTypes.default.func,
  loading: _propTypes.default.bool,
  ripple: _propTypes.default.bool,
  colored: _propTypes.default.bool,
  color: _propTypes.default.string,
  className: _propTypes.default.string
});